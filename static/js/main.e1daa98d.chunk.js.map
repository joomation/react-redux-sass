{"version":3,"sources":["store/modules/counter.js","store/modules/index.js","containers/HeaderContainer.js","App.js","serviceWorker.js","index.js"],"names":["INCREMENT","DECREMENT","increment","type","decrement","initialState","number","counter","state","arguments","length","undefined","Object","_Users_user_Desktop_react_starter_react_redux_scss_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","combineReducers","Header","react_default","a","createElement","className","react_router_dom","exact","activeClassName","to","Component","Home","lazy","__webpack_require__","e","then","bind","Counter","App","HeaderContainer","react","fallback","react_router","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","devTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rootReducer","ReactDOM","render","es","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e1daa98d.chunk.js","sourcesContent":["// action types\nconst INCREMENT = 'counter/INCREMENT';\nconst DECREMENT = 'counter/DECREMENT';\n\n// action function\nexport const increment = () => ({ type: INCREMENT });\nexport const decrement = () => ({ type: DECREMENT });\n\n// initial state\nconst initialState = {\n  number: 0,\n};\n\n// reducer\nexport default function counter(state = initialState, action) {\n  switch (action.type) {\n    case INCREMENT:\n      return {\n        ...state,\n        number: state.number + 1,\n      };\n    case DECREMENT:\n      return {\n        ...state,\n        number: state.number - 1,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport counter from './counter';\n\nexport default combineReducers({\n  counter\n});\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport PropTypes from 'prop-types'\nimport { NavLink } from 'react-router-dom'\n\n\nclass Header extends Component {\n\n  render() {\n    return (\n      <div className=\"header\">\n        <ul>\n          <li>\n            <NavLink exact activeClassName=\"active\" to=\"/\">Home</NavLink>\n          </li>\n          <li>\n            <NavLink activeClassName=\"active\" to=\"/counter\">Counter</NavLink>\n          </li>\n       \n        </ul>\n      </div>\n    )\n  }\n}\n\n\n\nexport default Header;\n","import React, { Suspense, lazy } from 'react';\nimport './styles/style.scss';\nimport HeaderContainer from './containers/HeaderContainer'\n\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n\nconst Home = lazy(() => import('./routes/Home'));\nconst Counter = lazy(() => import('./routes/Counter'));\n\nfunction App() {\n  \n  return (\n    <Router>\n      <HeaderContainer/>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/counter\" component={Counter}/>\n        </Switch>\n      </Suspense>\n     \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport rootReducer from './store/modules';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// 리덕스 개발자도구 적용\nconst devTools =\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\nconst store = createStore(rootReducer, devTools);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}